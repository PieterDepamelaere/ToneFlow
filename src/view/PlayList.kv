#:kivy 1.11.1

#:import os os
#:import pl pathlib
#:import CU src.model.CommonUtils.CommonUtils
#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import toast kivymd.toast.toast
#:import ILeftBodyTouch kivymd.uix.list.ILeftBodyTouch
#:import MDIconButton kivymd.uix.button.MDIconButton
#:import MDRoundFlatIconButton kivymd.uix.button.MDRoundFlatIconButton
#:import MDFloatingActionButtonSpeedDial kivymd.uix.button.MDFloatingActionButtonSpeedDial
#:import text_colors kivymd.color_definitions.text_colors
#:import colors kivymd.color_definitions.colors


<LineupEntryRowView@OneLineIconListItem>:
    icon: 'music-note' # One can code an if-statement after this
    #list_obj: None
    playlist_obj: None
    #on_release: self.list_obj.show_modal_view_playlist(self.playlist_obj)
    #txt: '' if self.playlist_obj is None else self.playlist_obj.file_path.stem

    BoxLayout:
        orientation: 'horizontal'
        #size_hint_y: None
        #height: '56'
        spacing: '5dp'
        pos_hint: {'center_y': 0.5}

        MDIconButton:
            icon: root.icon
            on_release: root.list_obj.show_modal_view_playlist(root.playlist_obj)

        MDRoundFlatIconButton:
            icon: "music-note"
            text: "START CONCERT FROM HERE"
            width: dp(250)
            text_color: app.theme_cls.primary_color
            on_release: root.playlist_obj.show_modal_view_toneflower(selected_lineup_entry=root)

        Widget:

        MDIconButton:
            icon: 'pencil'
            #theme_text_color: 'Custom'
            #text_color: app.theme_cls.primary_color
            on_release: root.list_obj.show_dialog_rename_playlist(root)

        MDIconButton:
            icon: 'trash-can'
            #theme_text_color: 'Custom'
            #text_color: app.theme_cls.primary_color
            on_release: root.list_obj.show_dialog_remove_playlist(root)

<PlayList>

    id: id_playlist
    name: CU.tfs.dic['SCREEN_PLAYLIST_CLASS'].value.__name__
    toolbar_title: CU.tfs.dic['SCREEN_PLAYLIST_CLASS'].name
    playlist_name: '<Title not available>'

    BoxLayout:
        orientation: 'vertical'

        # The canvas in the wrapping BoxLayout ensures the white background and that the modal view configured as size (1, 1) is actually fullscreen
        canvas.before:
#            Clear:
            Color:
                rgba: 	app.theme_cls.bg_light
            Rectangle:
                size: 	self.size
                pos: 	self.pos

        MDToolbar:
            id: toolbar
            type: 'top'
            mode: 'center' # options ['free-end', 'free-center', 'end', 'center']
            title: root.toolbar_title + ': ' + root.playlist_name
            md_bg_color: get_color_from_hex(colors[f'{root.theme_primary_color}']['A400'])
            left_action_items: [['arrow-left', lambda x: root.dismiss(animation=True)]]
            right_action_items: [['dots-vertical', lambda x: app.open_context_menu(x)]]

        BoxLayout:
            orientation: 'vertical'
            #halign: "center"
            spacing: dp(10)
            padding: dp(20)

            ScrollView:
                do_scroll_x: False
                size_hint: 1, 1
                scroll_type: ['bars', 'content']

                MDList:
                    id: ml

                    LineupEntryRowView:
                        icon: 'image'
                        text: u''
                        playlist_obj: root

#                    MDTextField:
#                        id: search_field
#                        hint_text: 'This is a test'

#                    OneLineIconListItem:
#                        text: "Song 1"
#                        IconLeftSampleWidget:
#                            id: li_icon_1
#                            icon: 'music-note'
#
#                    TwoLineIconListItem:
#                        text: "Image"
#                        secondary_text: "Image Entry"
#                        IconLeftSampleWidget:
#                            id: li_icon_2
#                            icon: 'image'

    #            MDIconButton:
    #                id: magnifier_button
    #                icon: 'magnify'
                    #on_release: root.filter_list()

    #            MDTextField:
    #                id: search_field
    #                hint_text: 'Search playlist'
    #                color_mode: 'primary' #'primary', options=['primary', 'accent', 'custom']
                    #on_text: root.filter_list()
    #                helper_text: 'Enter a small snippet of the name of the intended playlist'
    #                helper_text_mode: 'on_focus'

    #            MDIconButton:
    #                id: close_button
    #                icon: 'close'
                    #on_release: root.clear_search_pattern()


    #        MDScrollViewRefreshLayout:
    #            id: refresh_layout
    #            refresh_callback: root.refresh_list
    #            root_layout: app.main_widget.ids.float_box
    #
    #            RecycleView:
    #                id: rv
    #                key_viewclass: 'viewclass'
    #                key_size: 'height'
    #
    #                #SelectableRecycleBoxLayout:
    #                 #   default_size: None, dp(56)
    #                  #  default_size_hint: 1, None
    #                   # size_hint_y: None
    #                    #height: self.minimum_height
    #                    #orientation: 'vertical'
    #                    #multiselect: True
    #                    #touch_multiselect: True
    #
    #                RecycleBoxLayout:
    #                    padding: dp(10)
    #                    default_size: None, dp(48)
    #                    default_size_hint: 1, None
    #                    size_hint_y: None
    #                    height: self.minimum_height
    #                    orientation: 'vertical'


        MDFloatingActionButtonSpeedDial:
            id: floating_action_button
            icon: 'plus'
            elevation_normal: 8
            x: Window.width - self.width - dp(20) #Position is fixed at 20, 20 from the bottom-right corner, even this code does not work to reposition it
            y: dp(20) #Position is fixed at 20, 20 from the bottom-right corner, even this code does not work to reposition it

            data: root.add_options
            #bg_hint_color: (1, 0, 0, 1) #Background color of the hint texts next to the stacked buttons, same as button by default
            label_text_color: get_color_from_hex(text_colors[app.theme_cls.primary_palette][CU.tfs.dic['THEME_BACKGROUND_HUE'].value]) #Foreground color of the hint text next to the stacked buttons

            #bg_color_root_button: #Background color of the root button, by default, it adopts the theme
            #bg_color_stack_button: #Background color of the stacked buttons, by default, it adopts the theme

            color_icon_root_button: get_color_from_hex(text_colors[app.theme_cls.primary_palette][CU.tfs.dic['THEME_BACKGROUND_HUE'].value]) #Front color of the root button, override it to white
            color_icon_stack_button: get_color_from_hex(text_colors[app.theme_cls.primary_palette][CU.tfs.dic['THEME_BACKGROUND_HUE'].value]) #Front color of the stack buttons, override it to white

            rotation_root_button: False
            hint_animation: True
            right_pad: True #To allow the stacked buttons to scale a bit when hovered over

            callback: lambda x: toast(f'{x}')